[comment encoding = UTF-8 /]
[module generate('http:///urn.ecore','http:///grl.ecore', 'http:///ucm.ecore', 'http:///urncore.ecore', 'http:///asd.ecore', 'http:///fm.ecore', 'http:///ucmscenarios.ecore' )]


[template public generateElement(aURNspec : URNspec)]
[comment @main/]
[file ('both.txt', false, 'UTF-8')]
[generateFeature(aURNspec.grlspec) /]
[generateGoal(aURNspec.grlspec, aURNspec.urndef) /]
[/file]
[/template]

[template public generateGoal(aGRLSpec :GRLspec, aURNDef : URNdefinition) post (trim())]
[for (actor : Actor | aGRLSpec.actors)]
actor [actor.name/] [if (getContainedNodes(aGRLSpec, findActorRef(aURNDef, actor))->size()) > 0] {
[for (intElem : IntentionalElement | (getContainedNodes(aGRLSpec, findActorRef(aURNDef, actor))))]
  [getGRLType(intElem)/] [intElem.name/]
[/for]
}
[/if]
[/for]
[/template]

[template public getGRLType(intElem : IntentionalElement) post (trim())]
[if intElem.name.startsWith('Soft')]softgoal[/if]
[if not intElem.name.startsWith('Soft')][intElem.type.toString().toLower()/][/if]
[/template]




[template public generateFeature(aGRLSpec : GRLspec) post (trim())]
[for (elem : IntentionalElement | aGRLSpec.intElements)]
[if (elem.type.toString() = 'Task' and (findRoot(elem.linksSrc)))]
[insertRoot(elem, aGRLSpec)/]
[/if]
[/for]
[/template]

[template public insertRoot(intElem : IntentionalElement, agrlSpec : GRLspec) post (trim())]
features [featureBlock(intElem)/]
[/template]

[template public featureBlock(intElem : IntentionalElement) post (trim())]
[intElem.name /] [getDecompType(intElem) /] [if (checkForChildren(intElem.linksDest))]{
[for (link : ElementLink | intElem.linksDest)]
[if (link.name.startsWith('Optional') or link.name.startsWith('Mandatory') or link.name.startsWith('Decomposition'))]
  [getLinkType(link)/] [featureBlock(convertToIntElem(link.src)) /]
[/if]
[/for]
}
[/if]
[/template]

[template public getLinkType(link : ElementLink) post (trim())]
[if (link.name.startsWith('Optional'))]
optional
[/if]
[if (link.name.startsWith('Mandatory'))]
mandatory
[/if]
[/template]


[query public findRoot(links:OrderedSet(ElementLink)): Boolean = 
links -> isEmpty()
/]

[query public convertToIntElem(elem: GRLLinkableElement) : IntentionalElement =
elem
/]

[template public getDecompType(intElem : IntentionalElement) post (trim())]
[if intElem.decompositionType.toString().startsWith('Xor')]XOR[/if]
[if intElem.decompositionType.toString().startsWith('Or')]OR[/if]
[/template]

[query public checkForChildren(links:OrderedSet(ElementLink)) : Boolean = 
links -> notEmpty()
/]

[query public findActorRef(aURNDef : URNdefinition, actor: Actor) : IURNContainerRef = 
(aURNDef.specDiagrams->first()).contRefs->select(i|i.oclIsTypeOf(ActorRef))->select(i | i.contDef = actor) -> first()
/]

[query public getContainedNodes(aGRLSpec : GRLspec, ref : IURNContainerRef) : OrderedSet(IntentionalElement) =
(aGRLSpec.intElements -> select(i| ref.nodes -> includes(i.refs -> first())))
/]
