[comment encoding = UTF-8 /]
[module generate('http:///urn.ecore','http:///grl.ecore', 'http:///ucm.ecore', 'http:///urncore.ecore', 'http:///asd.ecore', 'http:///fm.ecore', 'http:///ucmscenarios.ecore' )]


[template public generateElement(aURNspec : URNspec)]
[comment @main/]
[file ('both.txt', false, 'UTF-8')]
[generateFeature(aURNspec.grlspec) /]
[generateGoal(aURNspec.grlspec, aURNspec.urndef) /]
[/file]
[/template]

[template public generateGoal(aGRLSpec :GRLspec, aURNDef : URNdefinition)]

[for (actor : Actor | aGRLSpec.actors)]

actor [actor.name/] [if (getContainedNodes(aGRLSpec, findActorRef(aURNDef, actor))->size()) > 0] {
[for (intElem : IntentionalElement | (getContainedNodes(aGRLSpec, findActorRef(aURNDef, actor))))]
[generateGRLBlock(aGRLSpec, aURNDef, intElem)/]
[/for]
}
[/if]
[/for]
[/template]

[template public getGRLType(intElem : IntentionalElement) post (trim())]
[if intElem.name.startsWith('Soft')]softgoal[/if]
[if not intElem.name.startsWith('Soft')]
[if intElem.type.toString().toLower().startsWith('ress')]resource[/if]
[if not intElem.type.toString().toLower().startsWith('ress')][intElem.type.toString().toLower()/][/if]
[/if]
[/template]

[template public generateGRLBlock(aGRLSpec: GRLspec, aURNDef : URNdefinition, intElem: IntentionalElement)]
  [getGRLType(intElem)/] [intElem.name/]{
[for (aBeliefLink : BeliefLink | (getBeliefLinks(aURNDef, intElem)))]
    [aBeliefLink.source.eGet('description')/]
[/for]
[if intElem.importanceQuantitative > 0]
    importance [intElem.importanceQuantitative/]
[/if]
[for (link : ElementLink | aGRLSpec.links -> select(i|i.src=intElem)) ]
	[getContributionType(link)/]
[/for]
  }
[/template]

[template public getContributionType(link: ElementLink) post (trim())]
[if (link.oclIsTypeOf("Contribution"))]contributesTo [link.dest.name/] with [link.eGet('quantitativeContribution')/][/if]
[if (link.oclIsTypeOf("Decomposition"))][getGRLDecomposition(link.dest.convertToIntElem())/] decomposes [link.dest.name/][/if]
[if (link.oclIsTypeOf("Dependency"))]dependsOn [getActor(link)/].[link.dest.name/] [/if]
[/template]

[template public getGRLDecomposition(intElem : IntentionalElement) post (trim())]
[if intElem.decompositionType.toString().startsWith('Xor')]xor[/if]
[if intElem.decompositionType.toString().startsWith('Or')]or[/if]
[if not intElem.decompositionType.toString().startsWith('Xor') and not intElem.decompositionType.toString().startsWith('Or')]and[/if]
[/template]

[template public getActor(link: ElementLink) post (trim())]
[link.dest.eGet('refs')->first().contRef.contDef.eGet('name')/]
[/template]



[template public generateFeature(aGRLSpec : GRLspec) post (trim())]
[for (elem : IntentionalElement | aGRLSpec.intElements)]
[if (elem.type.toString() = 'Task' and (findRoot(elem.linksSrc)))]
[insertRoot(elem, aGRLSpec)/]
[/if]
[/for]
[/template]

[template public insertRoot(intElem : IntentionalElement, agrlSpec : GRLspec) post (trim())]
features [featureBlock(intElem)/]
[/template]

[template public featureBlock(intElem : IntentionalElement) post (trim())]
[intElem.name /] [getDecompType(intElem) /] [if (checkForChildren(intElem.linksDest))]{
[for (link : ElementLink | intElem.linksDest)]
[if (link.name.startsWith('Optional') or link.name.startsWith('Mandatory') or link.name.startsWith('Decomposition'))]
  [getLinkType(link)/] [featureBlock(convertToIntElem(link.src)) /]
[/if]
[/for]
}
[/if]
[/template]

[template public getLinkType(link : ElementLink) post (trim())]
[if (link.name.startsWith('Optional'))]
optional
[/if]
[if (link.name.startsWith('Mandatory'))]
mandatory
[/if]
[/template]


[query public findRoot(links:OrderedSet(ElementLink)): Boolean = 
links -> isEmpty()
/]

[query public convertToIntElem(elem: GRLLinkableElement) : IntentionalElement =
elem
/]

[template public getDecompType(intElem : IntentionalElement) post (trim())]
[if intElem.decompositionType.toString().startsWith('Xor')]XOR[/if]
[if intElem.decompositionType.toString().startsWith('Or')]OR[/if]
[/template]

[query public checkForChildren(links:OrderedSet(ElementLink)) : Boolean = 
links -> notEmpty()
/]

[query public findActorRef(aURNDef : URNdefinition, actor: Actor) : IURNContainerRef = 
(aURNDef.specDiagrams->first()).contRefs->select(i|i.oclIsTypeOf(ActorRef))->select(i | i.contDef = actor) -> first()
/]

[query public getContainedNodes(aGRLSpec : GRLspec, ref : IURNContainerRef) : OrderedSet(IntentionalElement) =
(aGRLSpec.intElements -> select(i| ref.nodes -> includes(i.refs -> first())))
/]

[query public getBeliefLinks(aURNDef : URNdefinition, intElem : IntentionalElement) : OrderedSet(BeliefLink) = 
(aURNDef.specDiagrams->first()).connections->select(i|i.oclIsTypeOf(BeliefLink))->select(i|i.target = intElem.refs->first())
/]
